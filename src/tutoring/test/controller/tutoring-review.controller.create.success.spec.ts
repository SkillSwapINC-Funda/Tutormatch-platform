// Simulaci√≥n del sistema de rese√±as
type Rese√±a = {
  id: string;
  tutorId: string;
  estudianteId: string;
  contenido: string;
  puntuaci√≥n: number;
};

let rese√±asDB: Rese√±a[] = [];

// üü¢ Publicar rese√±a
function publicarRese√±a(rese√±a: Rese√±a) {
  rese√±asDB.push(rese√±a);
  return rese√±a;
}

// ‚úèÔ∏è Editar rese√±a
function editarRese√±a(id: string, nuevoContenido: string, nuevaPuntuaci√≥n: number) {
  const rese√±a = rese√±asDB.find(r => r.id === id);
  if (rese√±a) {
    rese√±a.contenido = nuevoContenido;
    rese√±a.puntuaci√≥n = nuevaPuntuaci√≥n;
  }
  return rese√±a;
}

// üëÄ Visualizar rese√±as por tutor
function obtenerRese√±asPorTutor(tutorId: string) {
  return rese√±asDB.filter(r => r.tutorId === tutorId);
}

// ‚ùå Eliminar rese√±a
function eliminarRese√±a(id: string) {
  const inicial = rese√±asDB.length;
  rese√±asDB = rese√±asDB.filter(r => r.id !== id);
  return rese√±asDB.length < inicial;
}

// ------------------ TESTS ------------------

describe('Sistema de rese√±as de tutor√≠as', () => {

  beforeEach(() => {
    rese√±asDB = []; // Limpiar antes de cada test
  });

  it('üü¢ deber√≠a publicar una rese√±a correctamente', () => {
    // Arrange
    const nuevaRese√±a: Rese√±a = {
      id: 'r1',
      tutorId: 't1',
      estudianteId: 'e1',
      contenido: 'Muy buen tutor',
      puntuaci√≥n: 5,
    };

    // Act
    const resultado = publicarRese√±a(nuevaRese√±a);

    // Assert
    expect(resultado).toEqual(nuevaRese√±a);
    expect(rese√±asDB.length).toBe(1);
  });

  it('‚úèÔ∏è deber√≠a editar una rese√±a existente', () => {
    // Arrange
    publicarRese√±a({ id: 'r1', tutorId: 't1', estudianteId: 'e1', contenido: 'Regular', puntuaci√≥n: 3 });

    // Act
    const actualizada = editarRese√±a('r1', 'Excelente clase', 5);

    // Assert
    expect(actualizada?.contenido).toBe('Excelente clase');
    expect(actualizada?.puntuaci√≥n).toBe(5);
  });

  it('üëÄ deber√≠a obtener las rese√±as por tutor', () => {
    // Arrange
    publicarRese√±a({ id: 'r1', tutorId: 't1', estudianteId: 'e1', contenido: 'Genial', puntuaci√≥n: 4 });
    publicarRese√±a({ id: 'r2', tutorId: 't1', estudianteId: 'e2', contenido: 'Muy claro', puntuaci√≥n: 5 });
    publicarRese√±a({ id: 'r3', tutorId: 't2', estudianteId: 'e3', contenido: 'Confuso', puntuaci√≥n: 2 });

    // Act
    const rese√±asT1 = obtenerRese√±asPorTutor('t1');

    // Assert
    expect(rese√±asT1.length).toBe(2);
    expect(rese√±asT1.every(r => r.tutorId === 't1')).toBe(true);
  });

  it('‚ùå deber√≠a eliminar una rese√±a por id', () => {
    // Arrange
    publicarRese√±a({ id: 'r1', tutorId: 't1', estudianteId: 'e1', contenido: 'B√°sico', puntuaci√≥n: 3 });

    // Act
    const eliminada = eliminarRese√±a('r1');

    // Assert
    expect(eliminada).toBe(true);
    expect(rese√±asDB.length).toBe(0);
  });
});
